#!/usr/bin/env python3
"""Combine SQL schema and function files for sql2pyapi system tests.

This script concatenates all schema files into a single combined_schema.sql file
and all function files into a single combined_functions.sql file.

Files are processed in order based on their numeric prefix to ensure proper dependency handling.

Why this is necessary:
1. sql2pyapi requires a single schema file and a single function file as input
2. For testing, we want to organize SQL files by feature/functionality
3. This script allows us to maintain modular SQL files while still working with sql2pyapi's requirements

File naming convention:
- Schema files: 01_schema_*.sql (executed first in Docker)
- Function files: 02_functions_*.sql (executed after schema files in Docker)

The numeric prefix (01_, 02_) controls execution order both in this combiner and in Docker.
"""

import os
import re
from pathlib import Path

# Constants
SQL_DIR = Path(__file__).parent / "sql"
DEST_DIR = SQL_DIR / "dist"
COMBINED_SCHEMA_FILE = DEST_DIR / "combined_schema.sql"
COMBINED_FUNCTIONS_FILE = DEST_DIR / "combined_functions.sql"

# Pattern to match schema and function files
# Match both patterns: NN_schema_*.sql and NN_schema*.sql
SCHEMA_PATTERN = re.compile(r"^\d+_schema.*\.sql$")  # Match files with 'schema' in the name
# Match both patterns: NN_functions_*.sql and NN_functions*.sql
FUNCTION_PATTERN = re.compile(r"^\d+_functions.*\.sql$")  # Match files with 'functions' in the name

def combine_files(file_pattern, output_file):
    """Combine all files matching the pattern into a single output file."""
    # Get all matching files and sort them by name
    matching_files = [f for f in os.listdir(SQL_DIR) if file_pattern.match(f)]
    matching_files.sort()  # Sort by filename to ensure correct order
    
    print(f"Combining files into {output_file}:")
    for file in matching_files:
        print(f"  - {file}")
    
    # Combine the files
    with open(output_file, 'w') as outfile:
        outfile.write(f"-- Combined file generated by combine_sql_files.py\n")
        outfile.write(f"-- Source files: {', '.join(matching_files)}\n\n")
        
        for file in matching_files:
            file_path = SQL_DIR / file
            outfile.write(f"-- Begin content from {file}\n")
            with open(file_path, 'r') as infile:
                outfile.write(infile.read())
            outfile.write(f"\n-- End content from {file}\n\n")
    
    print(f"Created {output_file}")

def main():
    """Main function to combine schema and function files."""
    print("Combining SQL files for sql2pyapi system tests...")
    
    # Clean up the destination directory if it exists
    import shutil
    if DEST_DIR.exists():
        shutil.rmtree(DEST_DIR)
    
    # Create the destination directory
    DEST_DIR.mkdir(parents=True, exist_ok=True)
    
    # Combine schema files
    combine_files(SCHEMA_PATTERN, COMBINED_SCHEMA_FILE)
    
    # Combine function files
    combine_files(FUNCTION_PATTERN, COMBINED_FUNCTIONS_FILE)
    
    print("Done!")

if __name__ == "__main__":
    main()
